name: Upload library
on:
  workflow_dispatch:
    inputs:
      libname:
        type: choice
        description: Which library to build and upload
        options:
          - tkassert
          - tklog
          - tkrng
          - tktokenswap
          - tkwsm
jobs:
  build_library:
    name: build library
    strategy:
      matrix:
        os: ['ubuntu-22.04', 'macos-12', 'windows-2022']
        build_type: ['Release', 'Debug']
        shared: ['False', 'True']
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: normalize line endings in conanfile and src directory
      if: matrix.os == 'windows-2022'
      # This is necessary to ensure consistent revisions across platforms.
      # Conan's revision hash is composed of hashes all the exported files, so
      # we must normalize the line endings in these.
      run: |
        $lib_files = Get-ChildItem "libs/${{ github.event.inputs.libname }}" -File -Recurse
        foreach ($f in $lib_files) {
          $normalized_file = [IO.File]::ReadAllText($f) -replace "`r`n", "`n"
          [IO.File]::WriteAllText($f, $normalized_file)
        }
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install conan
      uses: turtlebrowser/get-conan@v1.2
    - name: create profile
      run: conan profile detect
    - name: add remote
      run: conan remote add tket-libs https://quantinuumsw.jfrog.io/artifactory/api/conan/tket1-libs --index 0
    - name: build ${{ github.event.inputs.libname }}
      run: conan create -s build_type=${{ matrix.build_type }} -o $${{ github.event.inputs.libname }}/*:shared=${{ matrix.shared }} -o boost/*:header_only=True libs/${{ github.event.inputs.libname }} --build=missing --user=tket --channel=stable --format json > ${{ github.event.inputs.libname }}.json
    - name: authenticate to repository
      run: conan remote login -p ${{ secrets.JFROG_ARTIFACTORY_TOKEN_3 }} tket-libs ${{ secrets.JFROG_ARTIFACTORY_USER_3 }}
    - name: get version
      shell: bash
      run: |
        lib_label=`./libver ${{ github.event.inputs.libname }}.json ${{ github.event.inputs.libname }}`
        echo "LIB_LABEL=${lib_label}" >> $GITHUB_ENV
    - name: upload package
      if: github.event_name == 'push'
      run: conan upload ${{ env.LIB_LABEL }} -r=tket-libs
  macos-m1:
    name: build library (macos-m1)
    runs-on: ['self-hosted', 'macOS', 'ARM64']
    strategy:
      matrix:
        build_type: ['Release', 'Debug']
        shared: ['False', 'True']
    steps:
    - uses: actions/checkout@v3
    - name: Install conan
      uses: turtlebrowser/get-conan@v1.2
    - name: create profile
      run: conan profile detect --force
    - name: set remotes
      run: conan remote add --force tket-libs https://quantinuumsw.jfrog.io/artifactory/api/conan/tket1-libs --index 0
    - name: build ${{ github.event.inputs.libname }}
      run: conan create -s build_type=${{ matrix.build_type }} -o $${{ github.event.inputs.libname }}/*:shared=${{ matrix.shared }} -o boost/*:header_only=True libs/${{ github.event.inputs.libname }} --build=missing --user=tket --channel=stable --format json > ${{ github.event.inputs.libname }}.json
    - name: authenticate to repository
      run: conan remote login -p ${{ secrets.JFROG_ARTIFACTORY_TOKEN_3 }} tket-libs ${{ secrets.JFROG_ARTIFACTORY_USER_3 }}
    - name: get version
      run: |
        lib_label=`./libver ${{ github.event.inputs.libname }}.json ${{ github.event.inputs.libname }}`
        echo "LIB_LABEL=${lib_label}" >> $GITHUB_ENV
    - name: upload package
      if: github.event_name == 'push'
      run: conan upload ${{ env.LIB_LABEL }} -r=tket-libs
    - name: unauthenticate
      if: always()
      run: conan remote logout tket-libs
  manylinux:
    name: build library (manylinux)
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    - name: set up container
      run: |
        docker create --name linux_build -i -v /:/host quay.io/pypa/manylinux2014_x86_64:latest /bin/bash
        docker cp ./libs/${{ github.event.inputs.libname }} linux_build:/
        docker cp ./libver linux_build:/
        docker cp ./.github/workflows/linuxbuildlib linux_build:/
    - name: build ${{ github.event.inputs.libname }}
      run: |
        docker start linux_build
        cat <<EOF > env-vars
        TKLIB=${{ github.event.inputs.libname }}
        UPLOAD_PACKAGE=YES
        JFROG_ARTIFACTORY_TOKEN_3=${{ secrets.JFROG_ARTIFACTORY_TOKEN_3 }}
        JFROG_ARTIFACTORY_USER_3=${{ secrets.JFROG_ARTIFACTORY_USER_3 }}
        EOF
        docker exec --env-file env-vars linux_build /bin/bash -c "/linuxbuildlib"
